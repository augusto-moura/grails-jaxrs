Applications can implement their own entity providers by placing them into the @grails-app/providers@ directory. In
order to be auto-detected by grails-jaxrs they:

* must be annotated with @javax.ws.rs.ext.Provider@.
* must have a file name matching @*Reader.groovy@ if the corresponding class implements @javax.ws.rs.ext.MessageBodyReader@.
* must have a file name matching @*Writer.groovy@ if the corresponding class implements @javax.ws.rs.ext.MessageBodyWriter@.

h3. Custom Domain Object Providers

For customizing the conversion between Grails domain objects and their XML or JSON representations, one has to disable
the default domain object providers first. To disable the default domain object reader and writer, the following entries
must be added to application configuration:

* @org.grails.jaxrs.doreader.disable = true@
* @org.grails.jaxrs.dowriter.disable = true@

In the following example a custom domain object writer is implemented, therefore, only the default domain object writer
needs to be disabled. A custom XML creation should be done for the @Person@ domain class (see
[scaffolding example|guide:scaffolding]), for all other classes the default XML creation should occur. Here's the custom
provider.

{code}
package hello

import javax.ws.rs.Produces
import javax.ws.rs.ext.Provider
import groovy.xml.MarkupBuilder
import org.grails.jaxrs.support.DomainObjectWriterSupport

@Provider
@Produces(['text/xml', 'application/xml', 'text/x-json', 'application/json'])
class CustomDomainObjectWriter extends DomainObjectWriterSupport {
    protected Object writeToXml(Object obj, OutputStream entityStream, String charset) {
        if (obj instanceof Person) {
            def writer = new OutputStreamWriter(entityStream, charset)
            def builder = new MarkupBuilder(writer)
            builder.person {
                id(obj.id)
                fullName("${obj.firstName} ${obj.lastName}")
            }
        } else {
            super.writeToXml(obj, entityStream, charset)
        }
    }
}
{code}

The custom provider overrides the @writeToXml@ method and generates custom XML using a @MarkupBuilder@. To test this
provider, create an application as described in the scaffolding example, create a folder @grails-app/provider/hello@,
and place this custom provider there. The plugin will auto-detect the provider. To create a new person object in the
database, send the following request:

{code}
POST /api/person HTTP/1.1
Content-Type: application/xml
Accept: application/xml
Host: localhost:8080
Content-Length: 83

<person>
    <firstName>Custom</firstName>
    <lastName>Tester</lastName>
</person>
{code}

The response entity is a custom XML representation created by the custom provider:

{code}
HTTP/1.1 201 Created
Content-Type: application/xml
Location: http://localhost:8080/api/person/3
Transfer-Encoding: chunked
Server: Jetty(6.1.14)

<person>
  <id>3</id>
  <fullName>Custom Tester</fullName>
</person>
{code}

There are several other protected @DomainObjectWriterSupport@ methods for customizing the domain object marshalling, for
example @writeToJson@ to create custom JSON representations or @isWriteable@ to narrow the set of domain classes that a
custom domain object writer accepts. Refer to the the API docs for details.

h3. Further Entity Provider Support

For simple use cases, the *jaxrs* plugin additionally provides the abstract classes:

* @org.grails.jaxrs.support.MessageBodyReaderSupport<T>@
* @org.grails.jaxrs.support.MessageBodyWriterSupport<T>@

These base classes can also be used for classes other than domain classes. Implementors define the supported Java type
with a type parameter. For example, the following class is a @MessageBodyWriter@ that supports conversions for a
@Note@ class.

{code}
@Provider
@Produces('application/xml')
class NoteWriter extends MessageBodyWriterSupport<Note> {
    void writeTo(Note entity, MultivaluedMap httpHeaders, OutputStream entityStream) {
        def builder = new MarkupBuilder(new OutputStreamWriter(entityStream))
        builder.note {
            // create custom XML here ...
        }
    }
}
{code}

Similarly, given a POJO named @UserDto@, the following reader provides object instances from their JSON representation:

{code}
@Provider
@Consumes("application/json")
class UserDtoReader extends MessageBodyReaderSupport<UserDto> {
    @Override
    public UserDto readFrom(MultivaluedMap<String, String> httpHeaders,
            InputStream entityStream) throws IOException,
            WebApplicationException {
        return new JsonSlurper().parse(new InputStreamReader(entityStream))
    }
}
{code}

For details about the @MessageBodyWriterSupport@ and @MessageBodyReaderSupport@ classes refer to the API docs.

Alternatively, you may of course write JAX-RS providers from scratch by using the JAX-RS API directly.